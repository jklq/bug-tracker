package view

import (
	"fmt"
	queryProvider "github.com/jklq/project-tracker/internal/db"
	"time"
)

func parseDate(d time.Time) string {
	return d.Format("2006-01-02")
}

type TicketPriorityTicker_ticket struct {
	TicketID  string
	ProjectID string
	Priority  int16
}

type ProjectDetailViewParams struct {
	Template   templ.Component
	Project    queryProvider.Project
	Tickets    []queryProvider.Ticket
	SuccessMsg string
	Role       string
}

templ ProjectDetailView(params ProjectDetailViewParams) {
	@params.Template {
		<div class="max-h-screen flex flex-col ">
			@appHeader(truncateText(params.Project.Name, 40), truncateText(params.Project.Description.String, 80), "/app/project") {
				@secondaryBtn("members") {
					if params.Role == "project manager" {
						Manage members
					} else {
						View members
					}
				}
				if params.Role == "project manager" {
					@secondaryBtn("edit") {
						Edit project
					}
				}
				@primaryBtn("ticket/create") {
					+ Add New Ticket
				}
			}
			<div class="p-4 px-8 flex-grow ">
				<div class="py-4 max-w-screen-lg">
					if params.SuccessMsg != "" {
						<span class="text-green-800 bg-green-300 inline-block p-2">{ params.SuccessMsg }</span>
					}
					<div class="flex gap-3 items-end pb-3">
						<div class="flex-grow gap-3">
							<h1 class="text-3xl">Tickets</h1>
						</div>
					</div>
					<div class="mt-3">
						@ticketList(params.Tickets)
					</div>
				</div>
			</div>
		</div>
	}
}

templ ticketList(tickets []queryProvider.Ticket) {
	if len(tickets) == 0 {
		<p class="text-gray-500">No tickets</p>
	} else {
		<div class="border border-gray-300 ">
			<table class="w-full text-left">
				<thead class="text-sm text-gray-700 uppercase bg-gray-200">
					<tr>
						<th scope="col" class="pl-3 "></th>
						<th scope="col" class="pl-2 pr-6 py-3">
							Name
						</th>
						<th scope="col" class="px-6 py-3">
							Assigned To
						</th>
						<th scope="col" class="px-6 py-3">
							Priority
						</th>
					</tr>
				</thead>
				<tbody>
					for _, ticket := range tickets {
						<tr class="bg-gray-100 border-b border-x border-gray-300 hover:bg-gray-150 text-sm">
							<td class="pl-3" id={ fmt.Sprintf("ticket-status-dropdown-%s", ticket.TicketID) }>
								@TicketStatusDropdown(ticket, "closed")
							</td>
							<td scope="row" class="pl-2 pr-6 font-medium whitespace-nowrap h-full">
								<a
									href={ templ.URL(fmt.Sprintf("/app/project/%s/ticket/%s/view", ticket.ProjectID, ticket.TicketID)) }
									hx-boost="true"
									hx-push-url="true"
									class="py-2 hover:text-green-700 flex-grow h-full flex items-center ml-1"
								>
									{ truncateText(ticket.Title, 60) }
								</a>
							</td>
							<td class="px-6 py-2" id={ fmt.Sprintf("ticket-assignment-dropdown-%s", ticket.TicketID) }>
								@TicketAssignmentDropdown(ticket, "close")
							</td>
							<td class="px-6 py-2" id={ fmt.Sprintf("ticket-priority-col-%s", ticket.TicketID) }>
								@TicketPriorityTicker(TicketPriorityTicker_ticket{TicketID: ticket.TicketID, ProjectID: ticket.ProjectID, Priority: ticket.Priority})
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	}
}

templ TicketAssignmentDropdown(ticket queryProvider.Ticket, assignmentDropdownState string) {
	<a
		hx-get={ fmt.Sprintf("/app/project/%s/ticket/%s/assignment-dropdown/open", ticket.ProjectID, ticket.TicketID) }
		hx-boost="true"
		class="select-none p-1 border border-transparent hover:border-gray-300 duration-50 rounded cursor-pointer"
		hx-target={ fmt.Sprintf("#ticket-assignment-dropdown-%s", ticket.TicketID) }
	>
		if ticket.AssigneeID.Valid {
			<span>{ ticket.AssigneeUsername.String } ({ ticket.AssigneeEmail.String })</span>
		} else {
			<span class="text-gray-500">(Nobody)</span>
		}
	</a>
	if assignmentDropdownState == "open" {
		<div class="relative h-0 bg-white z-20">
			<div class="absolute bg-white rounded border border-gray-400 mt-2 min-w-[400px] p-2 px-4 pb-4">
				<label for="assignment-dropdown-search-bar" class="mb-1 inline-block text-sm whitespace-nowrap">
					Search for
					user:
				</label>
				<input
					class="w-full border border-gray-300 px-1"
					id="assignment-dropdown-search-bar"
					hx-get={ fmt.Sprintf("/app/project/%s/ticket/%s/assign/search", ticket.ProjectID, ticket.TicketID) }
					name="q"
					hx-trigger="keyup changed"
					type="text"
					hx-target={ fmt.Sprintf("#assignment-dropdown-%s-search-results", ticket.ProjectID) }
					autocomplete="off"
					autofocus
				/>
				<div id={ fmt.Sprintf("assignment-dropdown-%s-search-results", ticket.ProjectID) } class=""></div>
			</div>
		</div>
		<a
			id="fullscreen-overlay"
			class="fixed inset-0 z-10"
			hx-get={ fmt.Sprintf("/app/project/%s/ticket/%s/assignment-dropdown/close", ticket.ProjectID, ticket.TicketID) }
			hx-target={ fmt.Sprintf("#ticket-assignment-dropdown-%s", ticket.TicketID) }
		></a>
	}
}

templ TicketAssignmentSearchResults(projectID string, ticketID string, users []queryProvider.User) {
	<div class="whitespace-nowrap mt-3">
		if len(users) > 0 {
			for _, user := range users {
				<a
					class="bg-gray-100 even:bg-white py-2 border border-transparent px-1 block cursor-pointer hover:pl-4 hover:border-gray-300 duration-100"
					hx-post={ fmt.Sprintf("/app/project/%s/ticket/%s/assignTo/user/%s", projectID, ticketID, user.UserID) }
					hx-target={ fmt.Sprintf("#ticket-assignment-dropdown-%s", ticketID) }
				>
					{ user.Username } ({ user.Email })
				</a>
			}
			<a
				class="hidden"
				hx-post={ fmt.Sprintf("/app/project/%s/ticket/%s/assignTo/user/%s", projectID, ticketID, users[0].UserID) }
				hx-target={ fmt.Sprintf("#ticket-assignment-dropdown-%s", ticketID) }
				hx-trigger="keyup[keyCode==13] from:body"
			></a>
		} else {
			(No results)
		}
	</div>
}

templ TicketPriorityTicker(ticket TicketPriorityTicker_ticket) {
	<a
		hx-post={ fmt.Sprintf("/app/project/%s/ticket/%s/priority/set/%d", ticket.ProjectID, ticket.TicketID, ((ticket.Priority+1)%3)+1) }
		hx-target={ fmt.Sprintf("#ticket-priority-col-%s", ticket.TicketID) }
		class="select-none p-1 border border-transparent hover:border-gray-300 duration-50 rounded cursor-pointer"
	>
		switch ticket.Priority {
			case 3:
				High
			case 2:
				Medium
			case 1:
				Low
		}
	</a>
}

func ticketStatusDropdown_getStatusColor(status int16) string {
	switch status {
	case 1:
		return "bg-gray-200"
	case 2:
		return "bg-yellow-400"
	default:
		return "bg-lime-500"
	}
}

templ TicketStatusDropdown(ticket queryProvider.Ticket, satusDropdownState string) {
	<a
		class={ fmt.Sprintf("h-5 w-5 rounded-full block cursor-pointer border border-gray-500 %s", ticketStatusDropdown_getStatusColor(ticket.Status)) }
		hx-get={ fmt.Sprintf("/app/project/%s/ticket/%s/status-dropdown/open", ticket.ProjectID, ticket.TicketID) }
		hx-target={ fmt.Sprintf("#ticket-status-dropdown-%s", ticket.TicketID) }
	></a>
	if satusDropdownState == "open" {
		<div class="relative h-0 bg-white z-20">
			<div class="absolute bg-white rounded border mt-2 ">
				<ul class="flex flex-col items-center">
					if ticket.Status != 1 {
						<li class="w-full text-center">
							<a
								hx-post={ fmt.Sprintf("/app/project/%s/ticket/%s/status/set/1", ticket.ProjectID, ticket.TicketID) }
								class="w-full px-4 py-1 block whitespace-nowrap cursor-pointer hover:bg-gray-200"
								hx-target={ fmt.Sprintf("#ticket-status-dropdown-%s", ticket.TicketID) }
							>Open</a>
						</li>
					}
					if ticket.Status != 2 {
						<li class="w-full text-center">
							<a
								hx-post={ fmt.Sprintf("/app/project/%s/ticket/%s/status/set/2", ticket.ProjectID, ticket.TicketID) }
								class="w-full px-4 py-1 block whitespace-nowrap cursor-pointer hover:bg-gray-200"
								hx-target={ fmt.Sprintf("#ticket-status-dropdown-%s", ticket.TicketID) }
							>In Progress</a>
						</li>
					}
					if ticket.Status != 0 {
						<li class="w-full text-center">
							<a
								hx-post={ fmt.Sprintf("/app/project/%s/ticket/%s/status/set/0", ticket.ProjectID, ticket.TicketID) }
								class="w-full px-4 py-1 block whitespace-nowrap cursor-pointer hover:bg-gray-200"
								hx-target={ fmt.Sprintf("#ticket-status-dropdown-%s", ticket.TicketID) }
							>Closed</a>
						</li>
					}
				</ul>
			</div>
		</div>
		<a
			id="fullscreen-overlay"
			class="fixed inset-0 z-10"
			hx-get={ fmt.Sprintf("/app/project/%s/ticket/%s/status-dropdown/close", ticket.ProjectID, ticket.TicketID) }
			hx-target={ fmt.Sprintf("#ticket-status-dropdown-%s", ticket.TicketID) }
		></a>
	}
}
