package view

import (
	queryProvider "github.com/jklq/bug-tracker/db"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"fmt"
)

func capitalizeWords(str string) string {
	caser := cases.Title(language.English, cases.NoLower)
	return caser.String(str)
}

type ProjectMemberDetailViewParams struct {
	Project      queryProvider.Project
	Members      []queryProvider.GetProjectMembersWithRolesRow
	InvitedUsers []queryProvider.GetUsersWithOpenProjectInvitationsRow
}

templ ProjectMemberDetailView(template templ.Component, params ProjectMemberDetailViewParams, role string) {
	@template {
		<div class="max-h-screen max-w-screen-lg flex flex-col ">
			@projectHeader(params.Project, "view")
			<div class="p-4 px-8 flex-grow flex gap-14">
				if role == "project manager" {
					<div class="border p-4 flex-grow">
						@InvitedUserList(params.InvitedUsers, params.Project)
						<h2 class="font-bold text-lg mb-1">Invite user</h2>
						<form>
							<input
								autocomplete="off"
								hx-get="invite"
								hx-target="#invite-user-search-results"
								type="text"
								hx-trigger="keyup changed"
								name="q"
								placeholder="search user..."
								class="w-full border border-gray-300 px-1"
							/>
						</form>
						<div id="invite-user-search-results" class="mt-2"></div>
					</div>
				}
				<div class=" ">
					<h2 class="text-xl font-bold">Members</h2>
					<ul>
						for _, member := range params.Members {
							<li>{ capitalizeWords(member.Role) }: { member.Username } ({ member.Email })</li>
						}
					</ul>
				</div>
			</div>
		</div>
	}
}

templ InvitedUserList(invitedUsers []queryProvider.GetUsersWithOpenProjectInvitationsRow, project queryProvider.Project) {
	<div
		class="mb-4"
		id="invited-users-list"
		hx-get={ fmt.Sprintf("/app/project/%s/invite/list", project.ProjectID) }
		hx-trigger="invite-user from:body"
		hx-swap="outerHTML"
		hx-target="#invited-users-list"
	>
		<h2 class="font-bold text-lg">Invited users</h2>
		if len(invitedUsers) == 0 {
			<p class="text-gray-500">No users invited</p>
		} else {
			<ul>
				for _, user := range invitedUsers {
					<li class="border p-2 mb-2">
						<span class="text-green-700" id={ fmt.Sprintf("success-msg-remove-inv-%s", user.UserID) }>
							<span class="text-black">
								<span class="block text-gray-500">As { user.Role }</span> { user.Username } ({ user.Email }) 
								<a
									hx-swap="innerHTML"
									hx-delete={ fmt.Sprintf("/app/project/%s/uninvite/%s", project.ProjectID, user.UserID) }
									hx-target={ fmt.Sprintf("#success-msg-remove-inv-%s", user.UserID) }
									hx-target-errpr={ fmt.Sprintf("#error-msg-remove-inv-%s", user.UserID) }
									class="text-blue-800 hover:underline cursor-pointer"
								>[Remove invite]</a>
								<span class="text-green-700 block" id={ fmt.Sprintf("error-msg-remove-inv-%s", user.UserID) }></span>
							</span>
						</span>
					</li>
				}
			</ul>
		}
	</div>
}

templ InviteUserSearchResultView(user queryProvider.User) {
	<div class="mt-2 text-green-700" id="invitation-success">
		<form class="text-black" hx-post="invite" hx-target="#invitation-success" hx-target-error="#invitation-errors">
			<div class="mt-4 flex gap-3 items-center">
				<span>{ user.Username } ({ user.Email }) as</span>
				<input type="text" class="hidden" name="userId" value={ user.UserID }/>
				<select name="role" class="border p-1" id="">
					<option value="viewer">Viewer</option>
					<option value="editor">Editor</option>
					<option value="project manager">Project Manager</option>
				</select>
			</div>
			<div class="mt-4">
				<input type="submit" class="py-1 px-8 cursor-pointer whitespace-nowrap rounded border border-lime-900 duration-100  hover:bg-gray-200" value="Invite User"/>
			</div>
			<div class="mt-2 text-red-600" id="invitation-errors"></div>
		</form>
	</div>
}
